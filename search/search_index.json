{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Resumo H\u00e1 neste documento, de forma detalhada, toda a composi\u00e7\u00e3o, regras de uso, regras de neg\u00f3cio e ambientes necess\u00e1rios para que a equipe e apoiadores que estejam diretamente envolvidos nas aplica\u00e7\u00f5es do departamento de Data Analytics da GAV Resorts.","title":"Home"},{"location":"#resumo","text":"H\u00e1 neste documento, de forma detalhada, toda a composi\u00e7\u00e3o, regras de uso, regras de neg\u00f3cio e ambientes necess\u00e1rios para que a equipe e apoiadores que estejam diretamente envolvidos nas aplica\u00e7\u00f5es do departamento de Data Analytics da GAV Resorts.","title":"Resumo"},{"location":"API/","text":"Resumo A utiliza\u00e7\u00e3o de APIs no pipeline de dados \u00e9 recorrente. Tendo isto como premissa, foi desenvolvido um modelo de tratamento para APIs de forma que, independente de qual seja utilizada, haver\u00e1 reaproveitamento de c\u00f3digo. Diagrama de Sequ\u00eania Conforme o modelo abaixo, mantem-se o mesmo padr\u00e3o para todas as API\u00b4s consumidas. sequenceDiagram autonumber View_API->>Control_API: kwargs Control_API->>Model_API: getDF Control_API->>Model_API: getParams Control_API->>Model_API: processJSON Control_API->>Model_API: setBD Model_API ->>API_e_DW: get_token Model_API ->>API_e_DW: api_call Model_API ->>API_e_DW: save_BD API_e_DW -->> Model_API: RESPONSE Model_API -->> Control_API: RESPONSE Control_API -->> View_API: RESPONSE Especifica\u00e7\u00f5es Gerais Model_API Etapa respons\u00e1vel pela modelagem dos POST e GET da API. Nessa camada, \u00e9 feito o tratamento das mensagens de erro, a convers\u00e3o dos campos em dataframe e tamb\u00e9m \u00e9 controlado a inser\u00e7\u00e3o do dataframe no banco de dados de destino. def api_call() M\u00e9todo principal da model. Nela \u00e9 definido o endpoint e o campo desejado no qual deseja armazenar o retorno. def api_call(url, field, max_attempts=3): url : endpoint para requisi\u00e7\u00e3o da API field : campo requerido da reposta json max_attempts : hp\u00e1 uma tratativa que limita em 03 vezes a quantidade de tentativas da requisi\u00e7\u00e3o def refresh_token() Respons\u00e1vel por obter um novo token a partir das credenciais fornecidas para autentica\u00e7\u00e3o. def refresh_token(): def save_bd() def save_bd(df, **kwargs): df : dataframe que ser\u00e1 inserido no banco ** kwargs : campo requerido da reposta json def batch_insert_data() def batch_insert_data(df, table_name, engine, schema, batch_size=50000): df : dataframe que ser\u00e1 inserido no banco table_name : tabela de destinmo engine : engine \u00e9 a respons\u00e1vel por fazer a conex\u00e3o com o banco de dados destino schema : scheme de destino batch_size=50000 : limita\u00e7\u00e3o de 50 mil linhas para cada itera\u00e7\u00e3o na inser\u00e7\u00e3o no banco de destino Control_API Esta camada faz a intermedia\u00e7\u00e3o entre a view e a model. Aqui s\u00e3o tratados os par\u00e2metros fornecidos na view e direcionados para a model da API trabalhada. Nota A maior parte dos m\u00e9todos definidos aqui carregam apenas uma lista de parametros **kwargs def getParams() def getParams(**kwargs): **kwargs : lista de argumentos para obten\u00e7\u00e3o de IDs Aten\u00e7\u00e3o! Este m\u00e9todo retorna uma lista de IDs que j\u00e1 constam no banco e que s\u00e3o complementos para outro endpoint. def get_DF() def getDF(**kwargs): **kwargs : lista de argumentos para obten\u00e7\u00e3o do dataFrame. def processJSON() def processJSON(**kwargs): **kwargs : lista de argumentos para obten\u00e7ao do campo json para fazer o dump. def setBD() def setBD(**kwargs): **kwargs : lista de argumentos para fazer a persist\u00eancia no banco. View_API As views s\u00e3o as baseadas nos endpoints. Cada endpoint possui uma lista de argumentos e uma tratativa do banco destino. kwargs = { 'Argumentos', } a = requisicao control return a PowerBI Esta trata-se de todo o conjunto de dados que envolvem a aplica\u00e7\u00e3o do PowerBI. Seguindo a documenta\u00e7\u00e3o, apenas as views ser\u00e3o tratadas. Grupos Retorna os Workspaces (Groups) do Power BI. def getGrupos() def getGrupos(): kwargs = { 'endpoint': \"/groups\", 'params': 'nao', } dfGroups = getDF(**kwargs) return dfGroups endpoint : endpoint definido para os grupos do PowerBI params : validador de parametros. Neste n\u00e3o h\u00e1 parametriza\u00e7\u00e3o. def saveGrupos(dfGroups): def saveGrupos(dfGroups): kwargs = { 'df': dfGroups, 'schema' : 'powerbi', 'table_name' : 'grupos', 'truncate' : 'yes' } setBD(**kwargs) df : dataframe inserido no banco schema : schema destino table_name : tabela destino truncate : valida\u00e7\u00e3o para truncar a tabela. No caso de grupos, n\u00e3o \u00e9 feito o truncate def main(): def main(): df = getGrupos() saveGrupos(df) Executa, respectivamente, o carregamento do dataframe e a sua inser\u00e7\u00e3o no banco de destino. Gateways Retorna os Gateways do Power BI def getGateways(): def getGateways(): kwargs = { 'endpoint': \"/gateways\", 'params': 'nao', } df = getDF(**kwargs) return df endpoint : endpoint definido para os gateways do PowerBI params : validador de parametros. Neste n\u00e3o h\u00e1 parametriza\u00e7\u00e3o. def saveGateways(): def saveGateways(df): kwargs = { 'df': df, 'schema' : 'powerbi', 'table_name' : 'gateways', 'truncate' : 'yes' } setBD(**kwargs) df : dataframe inserido no banco schema : schema destino table_name : tabela destino truncate : valida\u00e7\u00e3o para truncar a tabela. No caso de gateways, n\u00e3o \u00e9 feito o truncate def jsonGateways(): def jsonGateways(df): kwargs = { 'df': df, 'jsonColumn': 'publicKey' } df = processJSON(**kwargs) kwargs = { 'df': df, 'jsonColumn': 'gatewayAnnotation' } df = processJSON(**kwargs) return df df : dataframe inserido no banco jsonColumn : coluna json na qual ser\u00e1 feito o dump def main(): def main(): df = getGateways() df = jsonGateways(df) saveGateways(df) df = getGateways() : obtem o dataframe principal df = jsonGateways(df) : trata os campos json saveGateways(df) : insere o dataframe no banco destino DataSources Retorna as Fontes de Dados no Relat\u00f3rio do Workspace (Group) Aten\u00e7\u00e3o! Depend\u00eancias: PowerBI Grupos e PowerBI Reports def paramsDatasource(): def paramsDatasource(): kwargs = { 'dbname': 'dbname', 'user': 'user', 'password' : 'password', 'host' : 'host', 'port': 'port', 'query':'SELECT g.id AS grupoID, r.datasetId AS reportID FROM powerbi.grupos g JOIN powerbi.reports r ON g.id = r.datasetworkspaceid' } IDs = getParams(**kwargs) return IDs dbname : nome do banco destino user : usu\u00e1rio para autentica\u00e7\u00e3o no banco para consulta password : senha do usu\u00e1rio do banco host : endere\u00e7o do banco port : porta utilizada para conex\u00e3o query : consulta que retorna os valores que se tornar\u00e3o os parametros da requisi\u00e7\u00e3o def getEndPoints(): def getEndPoints(IDs): lista = [] for id in IDs: endpoint = f\"/groups/{id[0]}/datasets/{id[1]}/datasources\" print('item adicionado') print(endpoint) lista.append(endpoint) return lista lista = [] : nome do banco destino for id in IDs: : itera por todos os IDs carregados no m\u00e9todo paramsDatasource() endpoint = f\"/groups/{id[0]}/datasets/{id[1]}/datasources\" : cria uma string com os valores de id[0] e id[1] def getDFDatasources(): def getDFDatasources(IDs): lista = getEndPoints(IDs) kwargs = { 'endpoint': lista, 'params': 'sim', 'IDs': IDs } df = getDF(**kwargs) return df endpoint : passa uma lista de endpoints params : valida se h\u00e1 parametriza\u00e7\u00e3o. Nesta view, h\u00e1 par\u00e2metros IDs : os IDs s\u00e3o os par\u00e2metros passados na requisi\u00e7\u00e3o def jsonDatasources(): def jsonDatasources(df): kwargs = { 'df': df, 'jsonColumn': 'connectionDetails' } df = processJSON(**kwargs) return df df : dataframe com os campos json jsonColumn : coluna json def saveDatasources(): def saveDatasources(df): kwargs = { 'df': df, 'schema' : 'powerbi', 'table_name' : 'datasource', 'truncate' : 'yes' } setBD(**kwargs) df : dataframe a ser salvo schema : esquema de destino table_name : tabela de desteino truncate : valida\u00e7\u00e3o para truncar a tabela de destino antes do insert def main(): def main(): IDs = paramsDatasource() df = getDFDatasources(IDs) df = jsonDatasources(df) saveDatasources(df) IDs = paramsDatasource() : carregando os IDs para parametros das requisi\u00e7\u00f5es df = getDFDatasources(IDs) : carregando dataframe df = jsonDatasources(df) : processando colunas json saveDatasources(df) : inserindo dataframe no banco destino","title":"API"},{"location":"API/#resumo","text":"A utiliza\u00e7\u00e3o de APIs no pipeline de dados \u00e9 recorrente. Tendo isto como premissa, foi desenvolvido um modelo de tratamento para APIs de forma que, independente de qual seja utilizada, haver\u00e1 reaproveitamento de c\u00f3digo.","title":"Resumo"},{"location":"API/#diagrama-de-sequenia","text":"Conforme o modelo abaixo, mantem-se o mesmo padr\u00e3o para todas as API\u00b4s consumidas. sequenceDiagram autonumber View_API->>Control_API: kwargs Control_API->>Model_API: getDF Control_API->>Model_API: getParams Control_API->>Model_API: processJSON Control_API->>Model_API: setBD Model_API ->>API_e_DW: get_token Model_API ->>API_e_DW: api_call Model_API ->>API_e_DW: save_BD API_e_DW -->> Model_API: RESPONSE Model_API -->> Control_API: RESPONSE Control_API -->> View_API: RESPONSE","title":"Diagrama de Sequ\u00eania"},{"location":"API/#especificacoes-gerais","text":"","title":"Especifica\u00e7\u00f5es Gerais"},{"location":"API/#model_api","text":"Etapa respons\u00e1vel pela modelagem dos POST e GET da API. Nessa camada, \u00e9 feito o tratamento das mensagens de erro, a convers\u00e3o dos campos em dataframe e tamb\u00e9m \u00e9 controlado a inser\u00e7\u00e3o do dataframe no banco de dados de destino.","title":"Model_API"},{"location":"API/#def-api_call","text":"M\u00e9todo principal da model. Nela \u00e9 definido o endpoint e o campo desejado no qual deseja armazenar o retorno. def api_call(url, field, max_attempts=3): url : endpoint para requisi\u00e7\u00e3o da API field : campo requerido da reposta json max_attempts : hp\u00e1 uma tratativa que limita em 03 vezes a quantidade de tentativas da requisi\u00e7\u00e3o","title":"def api_call()"},{"location":"API/#def-refresh_token","text":"Respons\u00e1vel por obter um novo token a partir das credenciais fornecidas para autentica\u00e7\u00e3o. def refresh_token():","title":"def refresh_token()"},{"location":"API/#def-save_bd","text":"def save_bd(df, **kwargs): df : dataframe que ser\u00e1 inserido no banco ** kwargs : campo requerido da reposta json","title":"def save_bd()"},{"location":"API/#def-batch_insert_data","text":"def batch_insert_data(df, table_name, engine, schema, batch_size=50000): df : dataframe que ser\u00e1 inserido no banco table_name : tabela de destinmo engine : engine \u00e9 a respons\u00e1vel por fazer a conex\u00e3o com o banco de dados destino schema : scheme de destino batch_size=50000 : limita\u00e7\u00e3o de 50 mil linhas para cada itera\u00e7\u00e3o na inser\u00e7\u00e3o no banco de destino","title":"def batch_insert_data()"},{"location":"API/#control_api","text":"Esta camada faz a intermedia\u00e7\u00e3o entre a view e a model. Aqui s\u00e3o tratados os par\u00e2metros fornecidos na view e direcionados para a model da API trabalhada. Nota A maior parte dos m\u00e9todos definidos aqui carregam apenas uma lista de parametros **kwargs","title":"Control_API"},{"location":"API/#def-getparams","text":"def getParams(**kwargs): **kwargs : lista de argumentos para obten\u00e7\u00e3o de IDs Aten\u00e7\u00e3o! Este m\u00e9todo retorna uma lista de IDs que j\u00e1 constam no banco e que s\u00e3o complementos para outro endpoint.","title":"def getParams()"},{"location":"API/#def-get_df","text":"def getDF(**kwargs): **kwargs : lista de argumentos para obten\u00e7\u00e3o do dataFrame.","title":"def get_DF()"},{"location":"API/#def-processjson","text":"def processJSON(**kwargs): **kwargs : lista de argumentos para obten\u00e7ao do campo json para fazer o dump.","title":"def processJSON()"},{"location":"API/#def-setbd","text":"def setBD(**kwargs): **kwargs : lista de argumentos para fazer a persist\u00eancia no banco.","title":"def setBD()"},{"location":"API/#view_api","text":"As views s\u00e3o as baseadas nos endpoints. Cada endpoint possui uma lista de argumentos e uma tratativa do banco destino. kwargs = { 'Argumentos', } a = requisicao control return a","title":"View_API"},{"location":"API/#powerbi","text":"Esta trata-se de todo o conjunto de dados que envolvem a aplica\u00e7\u00e3o do PowerBI. Seguindo a documenta\u00e7\u00e3o, apenas as views ser\u00e3o tratadas.","title":"PowerBI"},{"location":"API/#grupos","text":"Retorna os Workspaces (Groups) do Power BI.","title":"Grupos"},{"location":"API/#def-getgrupos","text":"def getGrupos(): kwargs = { 'endpoint': \"/groups\", 'params': 'nao', } dfGroups = getDF(**kwargs) return dfGroups endpoint : endpoint definido para os grupos do PowerBI params : validador de parametros. Neste n\u00e3o h\u00e1 parametriza\u00e7\u00e3o.","title":"def getGrupos()"},{"location":"API/#def-savegruposdfgroups","text":"def saveGrupos(dfGroups): kwargs = { 'df': dfGroups, 'schema' : 'powerbi', 'table_name' : 'grupos', 'truncate' : 'yes' } setBD(**kwargs) df : dataframe inserido no banco schema : schema destino table_name : tabela destino truncate : valida\u00e7\u00e3o para truncar a tabela. No caso de grupos, n\u00e3o \u00e9 feito o truncate","title":"def saveGrupos(dfGroups):"},{"location":"API/#def-main","text":"def main(): df = getGrupos() saveGrupos(df) Executa, respectivamente, o carregamento do dataframe e a sua inser\u00e7\u00e3o no banco de destino.","title":"def main():"},{"location":"API/#gateways","text":"Retorna os Gateways do Power BI","title":"Gateways"},{"location":"API/#def-getgateways","text":"def getGateways(): kwargs = { 'endpoint': \"/gateways\", 'params': 'nao', } df = getDF(**kwargs) return df endpoint : endpoint definido para os gateways do PowerBI params : validador de parametros. Neste n\u00e3o h\u00e1 parametriza\u00e7\u00e3o.","title":"def getGateways():"},{"location":"API/#def-savegateways","text":"def saveGateways(df): kwargs = { 'df': df, 'schema' : 'powerbi', 'table_name' : 'gateways', 'truncate' : 'yes' } setBD(**kwargs) df : dataframe inserido no banco schema : schema destino table_name : tabela destino truncate : valida\u00e7\u00e3o para truncar a tabela. No caso de gateways, n\u00e3o \u00e9 feito o truncate","title":"def saveGateways():"},{"location":"API/#def-jsongateways","text":"def jsonGateways(df): kwargs = { 'df': df, 'jsonColumn': 'publicKey' } df = processJSON(**kwargs) kwargs = { 'df': df, 'jsonColumn': 'gatewayAnnotation' } df = processJSON(**kwargs) return df df : dataframe inserido no banco jsonColumn : coluna json na qual ser\u00e1 feito o dump","title":"def jsonGateways():"},{"location":"API/#def-main_1","text":"def main(): df = getGateways() df = jsonGateways(df) saveGateways(df) df = getGateways() : obtem o dataframe principal df = jsonGateways(df) : trata os campos json saveGateways(df) : insere o dataframe no banco destino","title":"def main():"},{"location":"API/#datasources","text":"Retorna as Fontes de Dados no Relat\u00f3rio do Workspace (Group) Aten\u00e7\u00e3o! Depend\u00eancias: PowerBI Grupos e PowerBI Reports","title":"DataSources"},{"location":"API/#def-paramsdatasource","text":"def paramsDatasource(): kwargs = { 'dbname': 'dbname', 'user': 'user', 'password' : 'password', 'host' : 'host', 'port': 'port', 'query':'SELECT g.id AS grupoID, r.datasetId AS reportID FROM powerbi.grupos g JOIN powerbi.reports r ON g.id = r.datasetworkspaceid' } IDs = getParams(**kwargs) return IDs dbname : nome do banco destino user : usu\u00e1rio para autentica\u00e7\u00e3o no banco para consulta password : senha do usu\u00e1rio do banco host : endere\u00e7o do banco port : porta utilizada para conex\u00e3o query : consulta que retorna os valores que se tornar\u00e3o os parametros da requisi\u00e7\u00e3o","title":"def paramsDatasource():"},{"location":"API/#def-getendpoints","text":"def getEndPoints(IDs): lista = [] for id in IDs: endpoint = f\"/groups/{id[0]}/datasets/{id[1]}/datasources\" print('item adicionado') print(endpoint) lista.append(endpoint) return lista lista = [] : nome do banco destino for id in IDs: : itera por todos os IDs carregados no m\u00e9todo paramsDatasource() endpoint = f\"/groups/{id[0]}/datasets/{id[1]}/datasources\" : cria uma string com os valores de id[0] e id[1]","title":"def getEndPoints():"},{"location":"API/#def-getdfdatasources","text":"def getDFDatasources(IDs): lista = getEndPoints(IDs) kwargs = { 'endpoint': lista, 'params': 'sim', 'IDs': IDs } df = getDF(**kwargs) return df endpoint : passa uma lista de endpoints params : valida se h\u00e1 parametriza\u00e7\u00e3o. Nesta view, h\u00e1 par\u00e2metros IDs : os IDs s\u00e3o os par\u00e2metros passados na requisi\u00e7\u00e3o","title":"def getDFDatasources():"},{"location":"API/#def-jsondatasources","text":"def jsonDatasources(df): kwargs = { 'df': df, 'jsonColumn': 'connectionDetails' } df = processJSON(**kwargs) return df df : dataframe com os campos json jsonColumn : coluna json","title":"def jsonDatasources():"},{"location":"API/#def-savedatasources","text":"def saveDatasources(df): kwargs = { 'df': df, 'schema' : 'powerbi', 'table_name' : 'datasource', 'truncate' : 'yes' } setBD(**kwargs) df : dataframe a ser salvo schema : esquema de destino table_name : tabela de desteino truncate : valida\u00e7\u00e3o para truncar a tabela de destino antes do insert","title":"def saveDatasources():"},{"location":"API/#def-main_2","text":"def main(): IDs = paramsDatasource() df = getDFDatasources(IDs) df = jsonDatasources(df) saveDatasources(df) IDs = paramsDatasource() : carregando os IDs para parametros das requisi\u00e7\u00f5es df = getDFDatasources(IDs) : carregando dataframe df = jsonDatasources(df) : processando colunas json saveDatasources(df) : inserindo dataframe no banco destino","title":"def main():"},{"location":"Leitura_Notas_Fiscais/","text":"","title":"Nota Fiscal"}]}